// Runtime: 4 ms, faster than 88.21% of Java online submissions for Longest Substring Without Repeating Characters.
// Memory Usage: 39.7 MB, less than 12.98% of Java online submissions for Longest Substring Without Repeating Characters.
    
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int len = s.length();
        if(len== 0 || s==null){
            return 0;
        }

        Map<Character, Integer> map = new HashMap<>();
        int max = 0;
        
        int left = 0; 
        int right = 0;
        
        for(; right<len; right++){
            char curChar = s.charAt(right);
            if(map.containsKey(curChar)){
                left = Math.max(left, map.get(curChar)+1);          // 关键就是为嘛要Math.max()？比如说“abab”，对于第二个a，直接取a出现的上一个位置的后一个不就好啦？left还有其他的情况会变更吗？很奇怪是不是？
                                                                    // 那不如看看“abba”这个输入，你觉得第二个a更新的时候，a的下一个位置是第几个b？这样得到的子串是不是“bba”？这答案是对的吗？
            }

            map.put(curChar, right);                                // 如果!contains，那就相当于“add”；如果contains，那就相当于“modify”
            max = Math.max(max, right-left+1);                      // 例：2~4的是3个位置，然而4-2=2，所以+1
        }

        return max;
    }
}
