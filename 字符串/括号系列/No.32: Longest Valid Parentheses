// 动态规划
// Runtime: 1 ms, faster than 100.00% of Java online submissions for Longest Valid Parentheses.
// Memory Usage: 39.5 MB, less than 5.88% of Java online submissions for Longest Valid Parentheses.

// 一个栈
// Runtime: 2 ms, faster than 65.89% of Java online submissions for Longest Valid Parentheses.
// Memory Usage: 39.9 MB, less than 5.88% of Java online submissions for Longest Valid Parentheses.

// 双向遍历，从左到右来一遍，再从右到左来一遍。空间复杂度O(1)，优于上面两者
// Runtime: 1 ms, faster than 100.00% of Java online submissions for Longest Valid Parentheses.
// Memory Usage: 38.4 MB, less than 56.86% of Java online submissions for Longest Valid Parentheses.

class Solution {
    
        /**
         *  注意：题目可能没有解释清楚啥叫“最长的有效括号”。给出的例子有可能误导，即“左括号加右括号在idx-1和idx位置连续出现才算有效括号”
         *      但是实际上不是的，有个用例是"(()())"，答案是6，而按照上面的逻辑，答案应该是4。所以设计的算法是要去“连接远端的左括号”，而不仅仅是“idx-1”的左括号
         *  三种方法都很好，没有明显的高低之分，都应该掌握
         */
    
        // 动态规划
//     public int longestValidParentheses(String s) {
//         int len = s.length();
//         if(len == 0){
//             return 0;
//         }
//         int[] dp = new int[len];
        
//         int max = 0;                                            // 在dp的过程中维护一个max作为结果，而不是取dp[len-1]作为结果。就像“No.300: Longest Increasing Subsequence（medium）”里面维护的res一样
//         for (int i=1; i<len; i++) {
//             if (s.charAt(i) == ')') {                           // 不需要去考虑'('的情况，也不需要去维护一个栈保存'('和')''
//                 int lastInvalidIdx = i-dp[i-1] - 1;             // i-dp[i-1]是“本次valid的域(start,end)的start”，所以lastInvalidIdx是它减去1的位置
                
//                 if (s.charAt(i-1) == '(') {                     // 构成'......()'的形态，即与前一位构成一对新的()，那么dp[i] = dp[i-2] + 2
//                     // dp[i] = (i>=2 ? dp[i-2] : 0) + 2;        // 可以就这一句，但是可读性不好
//                     if(i < 2){
//                         dp[i] = 2;
//                     }else{
//                         dp[i] = dp[i-2] + 2;
//                     }
//                 } else if (lastInvalidIdx >= 0) {                  // 构成'......))'的形态，因为前一个是')'，且本个不是'('。那么此时要往前再看看有没有未匹配过的'('，以构成新的'(...())'这样形态。首当其冲的是，当前的idx减去dp[i-1]（即有效括号长度）不会<0，即“有搜索'('的必要”。就是i-dp[i-1] > 0
//                     if(s.charAt(lastInvalidIdx) == '('){           // 往前看一个位置即可。因为这是单向for循环过来的，也就不必再去while循环检查“再往前的validBeforeIdx”。如果是'((.....'这样的结构，那么本次一个')'也只能解决一个'('，要做的就是把它匹配上后面那个'('，然后扩大“valid域”的值，使得下一次再出现满足这个else if分支')'去匹配前面的那个'('即可
//                         // dp[i] = dp[i-1]+((i-dp[i-1]) >= 2 ? dp[i-dp[i-1]-2] : 0) + 2;            // 可以就这一句，但是可读性不好
//                         if(lastInvalidIdx < 2){                    // lastInvalidIdx < 2的话，不可能出现过'()'这样一对，那就等于“原valid域dp[i-1]再加2个位置”，也就是dp[i-1] + 2呗
//                             dp[i] = dp[i-1] + 2;
//                         }else{                                     // 如果lastInvalidIdx >= 2的话，lastInvalidIdx匹配好了，比如“() + (())”现在是dp[i-1] + 2 = 4了，那可是前面lastInvalidIdx - 1的地方是存在一对括号匹配的啊，那就得连接起来！所以dp[i] = dp[i-1] + 2 + dp[lastInvalidIdx-1]
//                             dp[i] = dp[i-1] + 2 + dp[lastInvalidIdx-1];
//                         }
//                     }
//                 }
                
//                 max = Math.max(max, dp[i]);
//             }
//         }
        
//         return max;
//     }
    
        // 一个栈
        //      遇到'('就把下标i入栈
        //      遇到')'则计算“与最近的'('相差多少”，可以求得max，如果遇到')'时stack为空
//     public int longestValidParentheses(String s) {
//         Stack<Integer> stack = new Stack<>();
//         stack.push(-1);                         
        
//         int max = 0;
//         for (int i=0; i<s.length(); i++) {
//             if (s.charAt(i) == '(') {
//                 stack.push(i);
//             } else {
//                 stack.pop();
                
//                 if (stack.empty()) {            // 空的时候代表说明状态呢？不如想想：什么时候会空？一开始是push(-1)的，如果是构成了'()()'，那能空吗？肯定是出现了单个')'打头的情况，导致了-1被pop()出来。那此时这个i就是“lastInvalidIdx”呗
//                     stack.push(i);
//                 } else {
//                     max = Math.max(max, i-stack.peek());
//                 }
                
//                 // 直接写下面的逻辑就错了，为什么？不如先想想为什么一开始push(-1)？假设idx=0和idx=1构成了'()'，算出来的length是2吗？当然得减去“lastInvalidIdx”啊。而怎么维护lastInvalidIdx呢？那就是下面写法的问题所在了：没有去考虑维护lastInvalidIdx，得不出正确的答案
//                 // if (!stack.empty()){
//                 //     max = Math.max(max, i-stack.pop());
//                 // }
//             }
//         }
        
//         return max;
//     }
    
        // 双向遍历，从左到右来一遍，再从右到左来一遍。空间复杂度O(1)，优于上面两者
        //      简单来说，从左向右时，用一个'('计数器left和一个')'计数器right。如果left==right了，那curMax=left*2（或right*2），max=Math.max(max, curMax)。如果left<right了，那就可以重新开始计数了。从右向左同理
        //      为什么从左到右、从右到左各走一遍呢？假设只走从左到右，最后一组的情况如果是left==right或者left<right能保证正确答案，可是left>right呢？即仅能保证left<=right的答案。那同理，右边过来的话，left==right和left>right的答案可以保证，那就是仅能保证left>=right的答案。两者夹一下，不就是left<=right和left>=right的所有正确答案了？取其中的max就行
    public int longestValidParentheses(String s) {
        int max = 0;
        
        int left = 0;
        int right = 0;
        for (int i=0; i<s.length(); i++) {                  // 从左到右
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            
            if (left == right) {
                max = Math.max(max, left*2);
            } else if (left < right) {
                left = 0;
                right = 0;
            }
        }
        
        left = 0;
        right = 0;
        for (int i=s.length()-1; i>-1; i--) {               // 从右到左
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            
            if (left == right) {
                max = Math.max(max, right*2);
            } else if (right < left) {
                left = 0;
                right = 0;
            }
        }
        
        return max;
    }
}
