// 解法1：HashSet。空间复杂度O(n)，题目要求最好用O(1)的时间复杂度
// Runtime: 5 ms, faster than 24.09% of Java online submissions for Missing Number.
// Memory Usage: 39.9 MB, less than 100.00% of Java online submissions for Missing Number.

// 解法2：位运算
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Missing Number.
// Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Missing Number.

// 解法3：数学方法
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Missing Number.
// Memory Usage: 40.2 MB, less than 98.95% of Java online submissions for Missing Number.

class Solution {
    
        // 解法0：排序。不符合O(n)时间复杂度要求
    
        // 解法1：HashSet。空间复杂度O(n)，题目要求最好用O(1)的时间复杂度
//     public int missingNumber(int[] nums) {
//         Set<Integer> numSet = new HashSet<>();
//         for (int num: nums) {
//             numSet.add(num);
//         }

//         int last = nums.length;
//         for (int number=0; number<=last; number++) {
//             if (!numSet.contains(number)) {
//                 return number;
//             }
//         }
        
//         return -1;
//     }
    
        // 解法2：位运算。用到了位运算里的异或运算
        //      异或运算是满足结合律的（a*b*c = a*c*b）
        //      missing = 4∧(0∧0)∧(1∧1)∧(2∧3)∧(3∧4)
        //              = (4∧4)∧(0∧0)∧(1∧1)∧(3∧3)∧2
        //              = 0∧0∧0∧0∧2
        //              = 2
    public int missingNumber(int[] nums) {
        int missing = nums.length;
        for (int i=0; i<nums.length; i++) {
            missing ^= i^nums[i];
        }
        
        return missing;
    }
    
        // 解法3：数学方法
//     public int missingNumber(int[] nums) {
//         int expectedSum = nums.length*(nums.length+1)/2;
        
//         int actualSum = 0;
        
//         for (int num: nums) {
//             actualSum += num;
//         }
        
//         return expectedSum - actualSum;
//     }
}
