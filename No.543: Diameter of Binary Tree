/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Runtime: 0 ms, faster than 100.00% of Java online submissions for Diameter of Binary Tree.
// Memory Usage: 39.2 MB, less than 18.18% of Java online submissions for Diameter of Binary Tree.

class Solution {
    
    /**
     *  可以用max=1、return max-1、max=Math.max(max, L+R+1)这个逻辑，也可以用max=0...这个逻辑
     *      取决于是怎么看待这个值的，即代表“节点数量”还是代表“边长数量”
     */
    
    private int max = 0;
    // private int max = 1;

    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        
        return max;
        // return max-1;
    }

    private int maxDepth(TreeNode root) {       // 计算的是“current-node的深度”
        if (root == null) {
            return 0;
        }
        
        int L = maxDepth(root.left);
        int R = maxDepth(root.right);
        
        max = Math.max(max, L+R);               // 'L+R' is diameter: L to root to R
        // max = Math.max(max, L+R+1);               // 'L+R' is diameter: L to root to R
        
        // 返回的是“深度”。max的计算在上一步
        return Math.max(L, R)+1;                // current-node算第一层，加上max(L,R)，就是max-cur-depth。不能给current-node这层赋值为0，不然递归下去的话，永远是0啊     
    }
}
