/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// 循环-bfs
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Tree Level Order Traversal.
// Memory Usage: 39 MB, less than 5.33% of Java online submissions for Binary Tree Level Order Traversal.

// 递归-dfs
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Tree Level Order Traversal.
// Memory Usage: 39.4 MB, less than 5.33% of Java online submissions for Binary Tree Level Order Traversal.

class Solution {
        // 循环，bfs-queue迭代
//     public List<List<Integer>> levelOrder(TreeNode root) {
//         List<List<Integer>> res = new ArrayList<>();
//         if(root == null){
//             return res;
//         }
        
//         Queue<TreeNode> queue = new LinkedList<>();
//         queue.add(root);
        
//         while(!queue.isEmpty()){
//             List<Integer> thisLayer = new ArrayList<>();  
            
//             int size = queue.size();        // 这个size要记录下来，不然的话底下一顿queue.poll()+queue.add()之后你觉得queue.size()是多少？
//             for (int i=0; i<size; i++) {
//                 TreeNode node = queue.poll();  
//                 thisLayer.add(node.val);  
                
//                 if (node.left != null) {  
//                     queue.add(node.left);  
//                 }
//                 if (node.right != null) {  
//                     queue.add(node.right);  
//                 }  
//             }  
            
//             res.add(thisLayer);   
//         }
        
//         return res;
//     }
    
        // 递归，dfs
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();

        dfs(root, res, 0);
        
        return res;
    }
    
    private void dfs(TreeNode current, List<List<Integer>> res, int layer){
        if(current == null){
            return;
        }
        if(layer == res.size()){
            res.add(new LinkedList<Integer>());
        }
        
        res.get(layer).add(current.val);

        dfs(current.left, res, layer+1);
        dfs(current.right, res, layer+1);
    }
}
