// Runtime: 4 ms, faster than 77.23% of Java online submissions for 3Sum Closest.
// Memory Usage: 39.7 MB, less than 6.67% of Java online submissions for 3Sum Closest.

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);                                                  // 排序。无论剪枝与否，这个解法都需要排序！
        
        int ans = nums[0] + nums[1] + nums[2];
        for(int i=0;i<nums.length;i++) {
            int start = i+1, end = nums.length-1;
            while(start < end) {
                int sum = nums[start] + nums[end] + nums[i];
                
                if(Math.abs(target - sum) < Math.abs(target - ans)){
                    ans = sum;
                }
                
                if(sum > target){
                    end--;
                    while(start<end && nums[end]==nums[end+1]){             // 类似于“剪枝”
                        end--;
                    }
                }else if(sum < target){
                    start++;
                    while(start<end && nums[start]==nums[start-1]){         // 类似于“剪枝”
                        start++;
                    }
                }else{
                    return ans;
                }
            }
            
            while(i<nums.length-2 && nums[i] == nums[i+1]){                 // 类似于“剪枝”
                i++;
            }
        }
        
        return ans;
    }
}
