// 递归
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Search.
// Memory Usage: 42.5 MB, less than 5.41% of Java online submissions for Binary Search.

// 循环
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Binary Search.
// Memory Usage: 52.5 MB, less than 5.41% of Java online submissions for Binary Search.

class Solution {

        // 递归
//     public int search(int[] nums, int target) {
//         return recursive(nums, target, 0, nums.length-1);
//     }

//     private int recursive(int[] nums, int target, int left, int right){
//         if(left > right){
//             // 注意：如果没有这个判定的话，如果arr中不存在这个target，就会出错！
//             return -1;
//         }

//         // 注意：下面的mid写法才是bug-free，上面的有可能会导致超大数字的溢出bug！
//         // int mid = (left+right) / 2;
//         int mid = left + (right - left) / 2;
        
//         if(nums[mid] == target){
//             return mid;
//         }else if(nums[mid] < target){
//             return recursive(nums, target, mid+1, right);
//         }else{
//             return recursive(nums, target, left, mid-1);
//         }
//     }
    
        // 循环
    public int search(int[] nums, int target) {
        int len = nums.length;
        
        int left = 0;
        int right = len-1;
        
        while(left <= right){
            int mid = left + (right - left) / 2;
            
            if(nums[mid] < target){
                left = mid+1;
            }else if(nums[mid] > target){
                right = mid-1;
            }else{
                return mid;
            }
        }
        
        return -1;
    }
}
