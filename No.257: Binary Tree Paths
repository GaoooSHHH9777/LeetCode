/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Runtime: 1 ms, faster than 100.00% of Java online submissions for Binary Tree Paths.
// Memory Usage: 39 MB, less than 5.55% of Java online submissions for Binary Tree Paths.

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new LinkedList<>();

        dfs(root, res, "");

        return res;
    }

    private void dfs(TreeNode root, List<String> res, String curPath) {
        if (root == null) {
            return;
        }
        
        curPath += Integer.toString(root.val);
        if (root.left == null && root.right == null){
            res.add(curPath);
        } else {
            curPath += "->";
            
            dfs(root.left, res, curPath);
            dfs(root.right, res, curPath);
        }
    }
}
