// 两个解法运行结果一样
// Runtime: 1 ms, faster than 100.00% of Java online submissions for Reverse Integer.
// Memory Usage: 36.7 MB, less than 5.55% of Java online submissions for Reverse Integer.

class Solution {
    
    // 忽略用long的解法
    
        // 比较容易想到的解法
    public int reverse(int x){
        int result = 0;

        while (x != 0){
            int tail = x % 10;
            int newResult = result*10 + tail;    
            
            // 这里是巧妙地判断是否溢出，即“new-result能否复原old-result”。如input=1534236469会造成溢出，它就复原不了“old-result”
            if ((newResult-tail)/10 != result){ 
                return 0; 
            }
            
            result = newResult;
            x /= 10;
        }

        return result;
    }
    
        // 顶着int溢出边缘的解法，注意"7"和"-8"这俩数字
    // public int reverse(int x) {
    //     int rev = 0;
    //     while (x != 0) {
    //         int pop = x % 10;
    //         x /= 10;
    //         if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
    //         if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
    //         rev = rev * 10 + pop;
    //     }
    //     return rev;
    // }
}
