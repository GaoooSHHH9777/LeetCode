/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Sorted Lists.
// Memory Usage: 38.6 MB, less than 19.53% of Java online submissions for Merge Two Sorted Lists.

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }else if (l2 == null) {
            return l1;
        }


        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;

        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                current.next = new ListNode(l1.val);
                l1 = l1.next;
            }else{
                current.next = new ListNode(l2.val);
                l2 = l2.next;
            }
            
            current = current.next;
        }

        // if(l1 != null){
        //     current.next = l1;
        // }
        // if(l2 != null){
        //     current.next = l2;
        // }

        // 上面的代码可以用这样一行直接表示
        current.next = l1 == null ? l2 : l1;

        return dummyHead.next;
    }
}
