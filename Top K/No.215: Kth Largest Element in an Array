// 直接调库sort，O(NlogN)
// Runtime: 2 ms, faster than 77.20% of Java online submissions for Kth Largest Element in an Array.
// Memory Usage: 41.4 MB, less than 5.18% of Java online submissions for Kth Largest Element in an Array.

// 直接用优先队列，O(NlogK)
// Runtime: 4 ms, faster than 63.74% of Java online submissions for Kth Largest Element in an Array.
// Memory Usage: 41.1 MB, less than 5.18% of Java online submissions for Kth Largest Element in an Array.

// 快速选择-Quick Selection，O(N)。pivot选择策略是“三数取中”
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Kth Largest Element in an Array.
// Memory Usage: 41.5 MB, less than 5.18% of Java online submissions for Kth Largest Element in an Array.

class Solution {
        
        // 也可以选择手写一个堆～就是堆排序那样
    
        // 直接调库sort（三路快排），O(NlogN)。原理是基于快速排序（三路快排），写出来主要是为了对比运行时间！
//     public int findKthLargest(int[] nums, int k) {
//         Arrays.sort(nums);
        
//         return nums[nums.length-1-k+1];      // 大可以直接写nums.length-k，不过可读性就比较差了
//     }
    
//         // 直接用优先队列，O(NlogK)。原理是基于堆，维护的是最小堆（最小堆的所有子节点都大于父节点，所以暴露出来的根节点是最小的，新的nums[i]每次和它进行比对
//     public int findKthLargest(int[] nums, int k) {
//         PriorityQueue<Integer> pq = new PriorityQueue<>();       // 默认就是最小堆，()里面可以不写comparator或者lambda表达式

//         for(int i=0; i<nums.length; i++) {
//             pq.offer(nums[i]);

//             if(pq.size() > k) {
//                 pq.poll();
//             }
//         }

//         return pq.poll();       // 这里return pq.peek()或者pq.poll()都是可以的
//     }
    
        // 快速选择-Quick Selection，O(N)。原理是基于快速排序的partition思想，pivot选择策略是“三数取中”。比较重要的是，这里partition的方式是“大数在pivot左边”，也可以把(nums[i] > pivotVal)换成<，这样的话输出最后的K个就可以了
        //      注意：这里并没有“把resultIdx左侧全部排好序”！！！只是找到了“哪个val会有k-1个比它小的数字”，仅此而已！
        //      如果真正地要去给它们都排好序，那应该在>或者<之后，递归调用本方法。这样的话，其实就是递归快排的过程了（写在最下方）。因为有递归的O(logn)过程，所以快排的时间复杂度O(nlogn)=递归O(logn)*partition函数O(n)
        //      同时，这样得到的结果，nums[]到resultIdx为止的所有数字，是“前K个大的数字”的结果！（这前K个大的数互相之间没有排过序，但是确实是前K个大的，因为第K个大的是pivot呀）
    public int findKthLargest(int[] nums, int k) {
        int indexK = k-1;       // 在数组里找第K个，那index当然是k-1了
        
        // 把边界记录下来，会有变动～
        int left = 0;
        int right = nums.length-1;
        
        while(true) {
            int resultIndex = partition(nums, left, right);
            
            if(resultIndex > indexK){
                right = resultIndex-1;
            }else if(resultIndex < indexK){
                left = resultIndex+1;
            }else{          // resultIndex == indexK，这里return两者中哪个都可以的
                return nums[resultIndex];
            }
        }
    }
    
    private int partition(int[] nums, int left, int right) {
        int pivotIdx = medianOfThree(nums, left, right);      // 三数取中    
        int pivotVal = nums[pivotIdx];
        
        swap(nums, pivotIdx, right);                          // 快排第一步：把pivot交换到最后一位去
        
        int index = left;
        for(int i=left; i<right; i++) {
            if(nums[i] > pivotVal) {                          // 和快排不同的是：把大的往前（快排是把小的往前）。当然了，如果要来个逆序的快排，那就和这个的处理方式一样了
                swap(nums, index++, i);
            }
        }
        
        swap(nums, right, index);                             // 快排最后一步：把pivot换回去（即“置换完成后的那个区域的后面一个位置”，注意index是会++的～ 
        
        return index;
    }
    
        // 三数取中
    private int medianOfThree(int[] arr, int left, int right) {
        int mid = left + (right-left)/2;
        
        if(arr[right] > arr[left]){
            swap(arr, left, right);
        }
        if(arr[right] > arr[mid]){
            swap(arr, right, mid);
        }
        if(arr[mid] > arr[left]){
            swap(arr, left, mid);
        }
        
        return mid;
    }
    
    private void swap(int[] arr, int indexA, int indexB) {
        int temp = arr[indexA];
        arr[indexA] = arr[indexB];
        arr[indexB] = temp;
    }
    
        /**
         *  快速排序
         */
//     public int[] quickSort(int[] A, int n) {
//         // write code here
//         if (A == null || A.length < 2) {
//             return A;
//         }
        
//         process(A, 0, n - 1);
        
//         return A;
//     }
//     public static void process(int[] arr, int left, int right) {
//         if (left > right) {
//             return;
//         }
        
//         int mid = partition(arr, left, right);
        
//         process(arr, left, mid - 1);
//         process(arr, mid + 1, right);
//     }
//     public static int partition(int[] arr, int left, int right) {
//         int pivotIdx = left + (int) (Math.random()*(right - left + 1));
//         int pivotVal = arr[pivotIdx];
        
//         swap(arr, pivotIdx, right);
        
//         int pivot = left;
//         for(int i=left; i<right; i++){
//             if (arr[i] < pivotVal) {
//                 swap(arr, pivot++, i);
//             }
//         }
        
//         swap(arr, pivot, right);
        
//         return pivot;
//     }
//     public static void swap(int[] arr, int left, int right) {
//         int temp = arr[left];
//         arr[left] = arr[right];
//         arr[right] = temp;
//     }
}
