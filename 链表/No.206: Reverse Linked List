/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// 递归1，一个方法
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List.
// Memory Usage: 38.6 MB, less than 5.04% of Java online submissions for Reverse Linked List.

// 递归2，两个方法
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List.
// Memory Usage: 38.6 MB, less than 5.04% of Java online submissions for Reverse Linked List.

// 循环
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List.
// Memory Usage: 38.2 MB, less than 5.04% of Java online submissions for Reverse Linked List.

class Solution {
        // 递归1，一个方法
    // public ListNode reverseList(ListNode head) {
	// 	if(head==null || head.next==null) {
	// 		return head;
	// 	}
        
    //     // 如果忘记了，去看https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/
	// 	ListNode cur = reverseList(head.next);        // 先一直往前顶，直到尾（next=null）。递归函数每次返回的cur必定是最后一个节点
	// 	head.next.next = head;                              // head的下一个节点指向head。咋理解呢？比如4 -> 5，要怎么样让5指回给4呢？4.next=5，要变成5.next=4的话，那不就是4.next.next=4吗？然后，一定要把4.next这个索引消除掉，不然的话4 <-> 5，就形成链表环了！！
	// 	head.next = null;                                   // head的next要为null啊，不然“旧的next指引”没有消除啊，会链表环的
        
	// 	return cur;                                         // 每次都返回cur，即最后一个节点
	// }
    
        // 递归2，两个方法
//     public ListNode reverseList(ListNode head) {
//         return recursive(head, null);
//     }

//     private ListNode recursive(ListNode current, ListNode newNext){
//         if(current == null){
//             return newNext;                          // 想一下就能通，不描述了，费字
//         }

//         ListNode oldNext = current.next;
//         current.next = newNext;

//         return recursive(oldNext, current);          // 注意它是有返回值的，直接return调用这个方法即可
//     }
    
        // 循环
    public ListNode reverseList(ListNode head) {
        ListNode ptr = null;      

        while(head != null){
            // 每次考虑下一个位置的node就行，一开始总在思考后面两个位置的node，所以写不对
            ListNode oldNext = head.next;
            head.next = ptr;
            ptr = head;           // 就是这一步使得它逐步地：tail -> head
            head = oldNext;
        }

        return ptr;               // 最终，它已经是head了，输出即可
    }
}
