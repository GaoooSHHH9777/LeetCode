/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// Runtime: 2 ms, faster than 98.70% of Java online submissions for Insertion Sort List.
// Memory Usage: 39.4 MB, less than 20.51% of Java online submissions for Insertion Sort List.

class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        
        ListNode cur = head;
        while(cur != null && cur.next != null){
            if(cur.val <= cur.next.val){              // 跳过“已排序完成的域”
                cur = cur.next;
                continue;
            }
            
            ListNode pre = dummyHead;                 // 从“已排序完成的域的first”开始，看“已排序完成的域里是否能有大于cur的值，即cur是否需要加入这个域”
            while(pre.next.val < cur.next.val){       // 始终以“.next”去追踪，不然的话无法实现“prev.next从oldNext切换到newNext”
                pre = pre.next;
            }
            
            // 找到第一个“可以放入的位置”之后，cur与cur.oldNext断开连接、接上cur.newNext，pre与pre.oldNext断开连接、接上cur.oldNext，cur.oldNext接上pre.oldNext
            ListNode next = cur.next;
            cur.next = cur.next.next;
            next.next = pre.next;
            pre.next = next;
        }
    
        return dummyHead.next;
    }
}
