/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
// 循环
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Sorted Lists.
// Memory Usage: 38.6 MB, less than 19.53% of Java online submissions for Merge Two Sorted Lists.

// 递归
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Two Sorted Lists.
// Memory Usage: 38.7 MB, less than 19.53% of Java online submissions for Merge Two Sorted Lists.

class Solution {
        // 循环。可以用于“No.148：排序链表”
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }

        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;

        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                // current.next = new ListNode(l1.val);     // 不需要new
                current.next = l1;
                l1 = l1.next;
            }else{
                // current.next = new ListNode(l2.val);     // 不需要new
                current.next = l2;
                l2 = l2.next;
            }
            
            current = current.next;
        }

        if(l1 != null){
            current.next = l1;
        }
        if(l2 != null){
            current.next = l2;
        }

        return dummyHead.next;
    }
    
        // 递归。来自于“No.23: 合并K个排序链表”
//     public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
//         if (l1 == null) return l2;
//         if (l2 == null) return l1;
    
//         if (l1.val < l2.val) {
//             l1.next = mergeTwoLists(l1.next, l2);
//             return l1;
//         } else {
//             l2.next = mergeTwoLists(l1, l2.next);
//             return l2;
//         }
//     }
}
