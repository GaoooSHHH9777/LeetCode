/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Linked List II.
// Memory Usage: 37.5 MB, less than 11.36% of Java online submissions for Reverse Linked List II.

class Solution {

    /**
     *  第一步：找到待反转节点的前一个节点。
     *  第二步：反转m到n这部分。
     *  第三步：将反转的起点的next指向反转的后面一部分。
     *  第四步：将第一步找到的节点指向反转以后的头节点。
     */

    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        
        ListNode node = dummyHead;
        for (int i=0; i<m-1; i++) {
            node = node.next;
        }

        // 此时的node是“反转域的前一个”。那么node.next就是“反转域的first”
        ListNode cur = node.next;
        ListNode oldNext = null;
        ListNode ptr = null;

        // 反转m到n这一段。也就是执行“反转链表”
        for (int i=0; i<=n-m; i++) {
            oldNext = cur.next;
            cur.next = ptr;
            ptr = cur;
            cur = oldNext;
        }

        // 此时node.next还是“area-first”，但是它其实现在已经是“area-final”，也有其他的.next索引指向它了。因为它是“area-final”了，所以将它的next指向“最后一次循环的oldNext”，以完成末端链表的拼接
        node.next.next = oldNext;

        // 然后“把反转域的头重新设置”，即“反转链表return的head-ptr”
        node.next = ptr;

        return dummyHead.next;
    }
}
