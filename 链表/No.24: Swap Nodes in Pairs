/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

// 手撕的递归
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.
// Memory Usage: 37.7 MB, less than 5.50% of Java online submissions for Swap Nodes in Pairs.

// 循环
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.
// Memory Usage: 37.7 MB, less than 5.50% of Java online submissions for Swap Nodes in Pairs.

class Solution {
        // 手撕的递归
//     public ListNode swapPairs(ListNode head) {
//         if(head == null || head.next == null){
//             return head;
//         }
        
//         // 改一下变量定义也行，看哪种理解起来方便了
//         ListNode oldNext = head.next;           // oldNext -> newHead
//         // ListNode nextNext = oldNext.next;
//         // oldNext.next = head;
//         // head.next = swapPairs(nextNext);
//         head.next = swapPairs(oldNext.next);    // 其实上面三行可以简写成下面两行～
//         oldNext.next = head;
            
//         return oldNext;
//     }
    
        // 循环。想清楚置换逻辑的话，其实和“No.206 反转链表（easy）”的难度也差不多
    public ListNode swapPairs(ListNode head) {
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        
        ListNode temp = dummyHead;
        while(temp.next != null && temp.next.next != null) {
            ListNode oldPrev = temp.next;         // oldPrev -> newNext
            ListNode newPrev = temp.next.next;    // oldNext -> newPrev
            
            temp.next = newPrev;
            oldPrev.next = newPrev.next;
            newPrev.next = oldPrev;
            temp = oldPrev;
        }
        
        return dummyHead.next;
    }
}
