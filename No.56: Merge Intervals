// Runtime: 5 ms, faster than 91.83% of Java online submissions for Merge Intervals.
// Memory Usage: 42.1 MB, less than 49.28% of Java online submissions for Merge Intervals.

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new LinkedList<>();
        if (intervals==null || intervals.length==0){
            return res.toArray(new int[0][]);
        }

		Arrays.sort(intervals, (i1, i2) -> i1[0]-i2[0]);

// 		List<int[]> result = new ArrayList<>();
// 		int[] newInterval = intervals[0];               // 假设intervals是一长串[start, end]，那这里就是全部的“start”。如例1就是<1,2,8,15>
// 		result.add(newInterval);                        // 
        
// 		for (int[] gap: intervals){
//             // gap[0]是start。以例1来说，第一次就是gap[0]=1、newInterval[1]=2
// 			if(gap[0] <= newInterval[1]){               // Overlapping intervals, move the end if needed
// 				newInterval[1] = Math.max(gap[1], newInterval[1]);          // gap[1]=3，newInterval[1]=2，所以newInterval[1]=3
//             }else{                                      // Disjoint intervals, add the new interval to the list
// 				newInterval = gap;
// 				result.add(newInterval);
// 			}
// 		}

// 		return result.toArray(new int[result.size()][]);
        
        for (int i=0; i<intervals.length; i++) {
            int left = intervals[i][0];
            int right = intervals[i][1];
            
            // 这个循环会先不断地进行
            //      设想[(0,3)、(0,1)、(0,2)、(1,9)、(2,5)、(10、11)]这样的输入，一开始的五个gap是不是一直在下面的循环里？
            while (i<intervals.length-1 && right>=intervals[i+1][0]) {      
                right = Math.max(right, intervals[i+1][1]);     // 看看currentRight和nextRight哪个大
                i++;
                // 不需要管left，因为left已经被Arrays.sort()排序过了，第一次走进for循环里的left一定是最小的（也可能是并列最小的，结果一样）
            }
            
            res.add(new int[]{left, right});
        }
        
        // 这两个选哪个返回都行
        return res.toArray(new int[res.size()][]);
        // return res.toArray(new int[0][]);
    }
}
