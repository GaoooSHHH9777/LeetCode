// Runtime: 1 ms, faster than 92.22% of Java online submissions for Permutations.
// Memory Usage: 41.4 MB, less than 5.68% of Java online submissions for Permutations.
    
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();

        dfs(nums, new ArrayList<>(), res, new boolean[nums.length]);
        
        return res;
    }

    private void dfs(int[] nums, List<Integer> path, List<List<Integer>> res, boolean[] used) {
        if (path.size() == nums.length) {
            res.add(new ArrayList<>(path));          // 特别注意这一行！！
            
            return;
        }

        for (int i=0; i<nums.length; i++) {
            if (!used[i]) {
                path.add(nums[i]);
                used[i] = true;

                dfs(nums, path, res, used);
                
                // "注意：这里是状态重置，是从深层结点回到浅层结点的过程，代码在形式上和递归之前是对称的"
                used[i] = false;
                path.remove(path.size()-1);
            }
        }
    }
}
