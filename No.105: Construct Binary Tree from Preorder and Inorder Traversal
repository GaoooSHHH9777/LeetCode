/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Runtime: 1 ms, faster than 98.42% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
// Memory Usage: 41.8 MB, less than 10.28% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.

class Solution {
    
    // 没做出来。思路有，但是死活不知道怎么写，越写越复杂、越写越乱
    
    Map<Integer, Integer> inorderMap = new HashMap<>();
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i=0; i<inorder.length; i++){
            inorderMap.put(inorder[i], i);
        }
        
        return recursive(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);
    }
    
    private TreeNode recursive(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd){
        if(preStart > preEnd || inStart > inEnd){
            return null;
        }

        TreeNode root = new TreeNode(preorder[preStart]);
        int inRoot = inorderMap.get(root.val);
        int numsLeft = inRoot - inStart;

        // 这两个递归里的参数很需要琢磨
        root.left = recursive(preorder, preStart+1, preStart+numsLeft, inorder, inStart, inRoot-1);
        root.right = recursive(preorder, preStart+numsLeft+1, preEnd, inorder, inRoot+1, inEnd);

        return root;
    }
}
