// 解法1：二分法，时间复杂度(nlogn)
// Runtime: 2 ms, faster than 48.38% of Java online submissions for Find the Duplicate Number.
// Memory Usage: 39.3 MB, less than 5.09% of Java online submissions for Find the Duplicate Number.

// 解法2：双指针（快慢指针），“环形链表”解法
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Find the Duplicate Number.
// Memory Usage: 40 MB, less than 5.09% of Java online submissions for Find the Duplicate Number.

// 解法3：与“No.442、No.268、No.448、No.41”同理
// Runtime: 1 ms, faster than 61.84% of Java online submissions for Find the Duplicate Number.
// Memory Usage: 39.5 MB, less than 5.09% of Java online submissions for Find the Duplicate Number.

class Solution {
    
        // 解法0.1：排序。时间复杂度O(nlogn)、空间复杂度O(n)（因为说了不能更改原数组）
        
        // 解法0.2：HashSet。时间复杂度O(n)、空间复杂度O(n)
    
        // 解法1：二分法，时间复杂度(nlogn)
        //      不需要输入数组有序，也不需要排序。二分法分的是“arr-idxs”
        //      原理就是先算出一个mid，然后“统计左半边小于mid的count有多少”。如果count
//     public int findDuplicate(int[] nums) {
//         int len = nums.length;
        
//         // 取left = 0、right = len-1，更符合循环里面的“left + right + 1”思路
//         int left = 0;                       // left = 0或者left = 1都能过
//         int right = len-1;                  // right = len或者right = len-1都能过
                                          
//         // 两个循环相乘得到O(nlogn)
//         while (left < right) {              // O(logn)
//             int mid = (left+right+1) / 2;   // 要+1的！因为arr-idx是0～n-1，arr-val是1～n。需要对比的值不是arr-idx对应的num，而是arr-val
            
//             int count = 0;
//             for (int num: nums) {           // O(n)。是遍历整个数组进行统计
//                 if (num < mid) {
//                     count += 1;
//                 }
//             }

//             // 举例：因为arr中是从1开始，那么假设arr中小于4的数字总量>=4（小于的仅有[1,2,3]），那么[1,3]这个区间里肯定出现了重复的值
//             //      因此，舍掉“整个arr里，mid以及右边的所有元素”。以此往复进行二分法～
//             if (count >= mid) {
//                 right = mid-1;
//             } else {
//                 left = mid;
//             }
//         }
                                          
//         return left;
//     }
    
        // 解法2：双指针（快慢指针），“环形链表”的解法，比较抽象，也称“Floyd解法”
        //      将arr-val视为链表的.next指针，arr-idx视为链表中的节点。因为数组中至少有两个值一样，也说明有两个节点指向同一个位置，所以一定会出现环
        //      可以看一下这个图。https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by--52/
//     public int findDuplicate(int[] nums) {
//         int slow = nums[0];
//         int fast = nums[nums[0]];
        
//         // 寻找相遇点
//         while (slow != fast) {
//             slow = nums[slow];
//             fast = nums[nums[fast]];
//         }
        
//         // slow从起点出发, fast从相遇点出发, 一次走一步
//         slow = 0;
//         while (slow != fast) {
//             slow = nums[slow];
//             fast = nums[fast];
//         }
        
//         return slow;
//     }
    
    
    public int findDuplicate(int[] nums) {
        int len = nums.length;
        
        List<Integer> res = new LinkedList<>();
        
        for(int i=0; i<len; i++){
            int idx = (nums[i]-1) % len;
            nums[idx] += len;
        }
        
        for(int i=0; i<len; i++){
            if(nums[i] > len*2){      
                return (i+1) % len;
            }
        }
        
        return -1;
    }
}
