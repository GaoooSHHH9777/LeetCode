// 从左到右。时间复杂度O(n)，空间复杂度O(n)
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Sorted Array.
// Memory Usage: 39.8 MB, less than 5.94% of Java online submissions for Merge Sorted Array.

// 从右到左。时间复杂度O(n)，空间复杂度O(1)
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Merge Sorted Array.
// Memory Usage: 39.4 MB, less than 5.94% of Java online submissions for Merge Sorted Array.

class Solution {
        // 从左到右。时间复杂度O(n)，空间复杂度O(n)
//     public void merge(int[] nums1, int m, int[] nums2, int n) {
//         int[] nums3 = new int[m];
//         System.arraycopy(nums1, 0, nums3, 0, m);
        
//         int i = 0;
//         int j = 0;
//         int length = m+n;

//         for (int k=0; k<length; k++) {
//             if (i == m) {
//                 nums1[k] = nums2[j++];
//             } else if (j == n) {
//                 nums1[k] = nums3[i++];
//             } else if (nums3[i] < nums2[j]) {
//                 nums1[k] = nums3[i++];
//             } else {
//                 nums1[k] = nums2[j++];
//             }
//         }
//     }

        // 从右到左。时间复杂度O(n)，空间复杂度O(1)
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int len = m+n;
        int i = m-1;
        int j = n-1;

        for (int k=len-1; k>=0; k--) {
            if (i == -1) {
                System.arraycopy(nums2, 0, nums1, 0, j+1);
                break;
            } else if (j == -1) {
                break;
            } else if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i--];
            } else {
                nums1[k] = nums2[j--];
            }
        }
    }
}
