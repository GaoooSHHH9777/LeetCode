// 解法1
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array II.
// Memory Usage: 39.4 MB, less than 54.93% of Java online submissions for Search in Rotated Sorted Array II.

// 解法2
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array II.
// Memory Usage: 39.4 MB, less than 54.93% of Java online submissions for Search in Rotated Sorted Array II.

class Solution {
        // 解法1
    public boolean search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
    
        while(left <= right) {
            int m = (left+right)/2;
            if(nums[m] == target){
                return true;
            }

            if(nums[m] == nums[left]){
                left++;   //"duplicate", jump
            } else if(nums[m] > nums[left]) {                      // like [2,5,6,7] from [2,5,6,7,0,1,2]
                if(nums[m] > target && nums[left] <= target){      // [left, mid-1]
                    right = m - 1; 
                }else{                                             // [mid+1, right]
                    left = m + 1;
                }
            } else {                                               // like [7,0,1,2] from [2,5,6,7,0,1,2]  
                if(nums[m] < target && nums[right] >= target){     // [mid+1, right]
                    left = m + 1;
                }else{                                             // [left, mid-1]
                    right = m - 1;
                } 
            }
        }
        
        return false;
    }
    
        // 解法2。主要是在对right处理的时候，并没有把right = mid+1，而是right=mid。可以看一下No.35的两种二分写法
//     public boolean search(int[] nums, int target) {
//         if(nums.length == 0){
//             return false;
//         }
        
//         int left = 0;
//         int right = nums.length-1;

//         while (left < right) {
//         // while (left <= right) {
//             int mid = (left + right) >>> 1;
            
//             if (nums[mid] > nums[left]) {
//                 if (nums[left] <= target && target <= nums[mid]) {
//                     right = mid;
//                 } else {
//                     left = mid + 1;
//                 }
//             } else if (nums[mid] < nums[left]) {
//                 if (nums[mid] < target && target <= nums[right]) {
//                     left = mid + 1;
//                 } else {
//                     right = mid;
//                 }
//             } else {
//                 // 要排除掉左边界之前，先看一看左边界可以不可以排除
//                 if (nums[left] == target) {
//                     return true;
//                 } else {
//                     left = left + 1;
//                 }
//             }
//         }
        
//         // 后处理，夹逼以后，还要判断一下，是不是 target
//         return nums[left] == target;     // 如果上面是"left < right"，那么这里不能直接return false！
//         // return false;                 // 如果上面是"left <= right"，那么这里可以直接return false～
//     }
}
