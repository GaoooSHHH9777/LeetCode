// 手撕的递归，但是有个问题：第一遍找point的时候好像是O(n)？
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array.
// Memory Usage: 38.4 MB, less than 44.65% of Java online submissions for Search in Rotated Sorted Array.

// 优化解1.0，不递归，两个循环。优化点在于“二分法找point，而不是O(n)”
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array.
// Memory Usage: 38.1 MB, less than 46.54% of Java online submissions for Search in Rotated Sorted Array.

// 优化解2.0，不递归，一个循环
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array.
// Memory Usage: 38.3 MB, less than 44.65% of Java online submissions for Search in Rotated Sorted Array.

class Solution {
        // 手撕的递归，但是有个问题：第一遍找point的时候好像是O(n)？
        //      这个“找point”的思想来源于“No.31: 下一个排列”
//     public int search(int[] nums, int target) {
//         int point = nums.length-2;
//         for(; point>=0; point--){
//             if(nums[point+1] < nums[point]){
//                 break;
//             }
//         }

//         int left = binary(nums, 0, point, target);
//         int right = binary(nums, point+1, nums.length-1, target);

//         return left > right ? left : right;
//     }

//     private int binary(int[] nums, int start, int end, int target){
//         if(start<0 || end>nums.length-1 || start>end){
//             return -1;
//         }

//         int mid = (end+start)/2;

//         if(nums[mid] > target){
//             return binary(nums, start, mid-1, target);
//         }else if(nums[mid] < target){
//             return binary(nums, mid+1, end, target);
//         }else{
//             return mid;
//         }
//     }

        // 优化解1.0，不递归，两个循环。优化点在于“二分法找point，而不是O(n)”
    public int search(int[] nums, int target) {
        if(nums.length == 0){
            return -1;
        }

        int start = 0, end = nums.length-1;
        // 二分找“point”
        while (start < end) {           // 这里写"<="那就死循环了。。
            int mid = start+(end-start)/2;
            if (nums[mid] > nums[end]){
                start = mid+1;
            }else{
                end = mid;
            }
        }
        int minIdx = start;
        // if (target == nums[minIdx]){            // 要是恰巧minIndex对应的数字就是要找的数字，直接返回～可以省略，不是主体代码，不过思想可以借鉴
        //     return minIdx;
        // }

        int len = nums.length;
        /**
         *  确定left和right。首先，arr分为左半边和右半边，左半边：(0, minIdx-1)、右半边：(minIdx, nums.length-1)
         *      对于left，如果target小于等于arr的最后一个，那target肯定落在“arr的右半边”里面
         *      对于right，如果target大于arr的最后一个，那target肯定落在“arr的左半边”里面
         *          可以对照[3,4,5,6,0,1,2]，target=1和target=4来想～
         */
        int left = (target <= nums[len-1]) ? minIdx : 0;
        int right = (target > nums[len-1]) ? minIdx : len-1;

        // 最常规的二分写法了，注意left <= right，一定要有"="！
        while (left <= right) {
            int mid = left+(right-left)/2;
            if (nums[mid] == target) return mid;
            else if (target > nums[mid]) left = mid + 1;
            else right = mid - 1;
        }

        return -1;
    }
    
        // 优化解2.0，不递归，一个循环
        //      总的来说，如果数组一分为二，假设一定存在过旋转，那么两个数组一定是“一个单调递增、一个单调递增后还会单调递减”
        //      由此，这个只需一趟的二分法是“如果中间的数小于最右边的数，则右半段是有序的；如果中间数大于最右边数，则左半段是有序的”
    // public int search(int[] nums, int target) {
    //     int left = 0;
    //     int right = nums.length-1;
        
    //     while(left <= right){
    //         int mid = (left+right)/2;
            
    //         // 先判断“当前域是否为单调递增的”
    //         if(nums[mid] < nums[right]){          // 如果中间的数小于最右边的数，则右半段是有序的
    //             if(nums[mid]<target && target<=nums[right]){
    //                 left = mid+1;
    //             }else{
    //                 right = mid-1;
    //             }
    //         }else if(nums[mid] > nums[right]){          // 如果中间数大于最右边数，则左半段是有序的
    //             if(nums[left]<=target && target<nums[mid]){
    //                 right = mid-1;
    //             }else{
    //                 left = mid+1;
    //             }
    //         }else{      // nums[mid] == nums[right]。题目中说了没有重复元素
    //             return mid;
    //         }
    //     }
        
    //     return -1;
    // }
}
