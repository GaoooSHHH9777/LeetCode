/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Runtime: 1 ms, faster than 98.42% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.
// Memory Usage: 41.8 MB, less than 10.28% of Java online submissions for Construct Binary Tree from Preorder and Inorder Traversal.

class Solution {
    
    Map<Integer, Integer> inorderMap = new HashMap<>();
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i=0; i<inorder.length; i++){
            inorderMap.put(inorder[i], i);
        }
        
        return recursive(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);
    }

        // 从大局上看，主要就是逐步切割[preStart, preEnd]和[inStart, inEnd]这两个区间
    private TreeNode recursive(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd){
        if(preStart > preEnd || inStart > inEnd){
            return null;
        }

        int curRootVal = preorder[preStart];
        TreeNode root = new TreeNode(curRootVal);
        int inRoot = inorderMap.get(curRootVal);        // pre[]能得到“根结点”，但是不知道它在in[]里面的位置，所以获取一下，以“继续往树的深层走”
        int leftCount = inRoot - inStart;               // cur-root的左树有多少个节点。显而易见，是in[]里面的root-idx和start-idx两者的差值。想不通就拿题例看一下

        // 分割[preStart, preEnd]区间，它肯定是完全由cur-root的左树和右树构成。这一步就是”我已知左树需要用多少count了，于是靠这个count切割区间，继续下发给左树和右树”
        //      参数的话想想就能理解，需要注意的是“要下发左树和右树，你就得跳过cur-root-idx”
        root.left = recursive(preorder, preStart+1, preStart+leftCount, inorder, inStart, inRoot-1);
        root.right = recursive(preorder, preStart+leftCount+1, preEnd, inorder, inRoot+1, inEnd);

        return root;
    }
}
