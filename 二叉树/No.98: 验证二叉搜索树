/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
        // 解法1：递归
    public boolean isValidBST(TreeNode root) {
        return recursive(root, null, null);
    }

    public boolean recursive(TreeNode node, Integer lower, Integer upper) {
        if (node == null) {
            return true;
        }

        int val = node.val;
        if (lower != null && val <= lower) {
            return false;
        }
        if (upper != null && val >= upper) {
            return false;
        }

        if (!recursive(node.right, val, upper)) {
            return false;
        }
        if (!recursive(node.left, lower, val)) {
            return false;
        }

        return true;
    }

        // 解法2：中序遍历思想
    // public boolean isValidBST(TreeNode root) {
    //     Deque<TreeNode> stack = new LinkedList<>();

    //     TreeNode p = root;
    //     TreeNode pre = null;
    //     while (p != null || !stack.isEmpty()) {
    //         while (p != null) {
    //             stack.push(p);
    //             p = p.left;
    //         }

    //         p = stack.pop();
    //         if (pre != null && pre.val >= p.val) {
    //             return false;
    //         }

    //         pre = p;
    //         p = p.right;
    //     }

    //     return true;
    // }
}
