// 手撕解法，PriorityQueue + Set
// Runtime: 4 ms, faster than 34.88% of Java online submissions for Third Maximum Number.
// Memory Usage: 41.8 MB, less than 8.70% of Java online submissions for Third Maximum Number.

// TreeSet解法
// Runtime: 3 ms, faster than 50.54% of Java online submissions for Third Maximum Number.
// Memory Usage: 42.1 MB, less than 8.70% of Java online submissions for Third Maximum Number.

// 三个max解法，非最优
// Runtime: 2 ms, faster than 70.89% of Java online submissions for Third Maximum Number.
// Memory Usage: 39.1 MB, less than 86.96% of Java online submissions for Third Maximum Number.

// 最优解
// Runtime: 0 ms, faster than 100.00% of Java online submissions for Third Maximum Number.
// Memory Usage: 39.2 MB, less than 86.96% of Java online submissions for Third Maximum Number.

class Solution {
        // 手撕解法，注意API的基本使用～
//     public int thirdMax(int[] nums) {
//         PriorityQueue<Integer> pq = new PriorityQueue<>();
//         Set<Integer> set = new HashSet<>();
        
//         for(int i=0; i<nums.length; i++){
//             set.add(nums[i]);
//         }
        
//         Iterator<Integer> it = set.iterator();
//         while(it.hasNext()){
//             pq.add(it.next());
            
//             if(pq.size() > 3){
//                 pq.poll();
//             }
//         }

//         if(pq.size() < 3){
//             int max = -1;
//             while(!pq.isEmpty()){
//                 max = pq.poll();
//             }

//             return max;
//         }
        
//         return pq.peek();
//     }

        // TreeSet解法
//     public int thirdMax(int[] nums) {
//         if (nums == null || nums.length == 0) throw new RuntimeException("error");

//         TreeSet<Integer> set = new TreeSet<>();
//         for (Integer elem : nums) {
//             set.add(elem);
//             if (set.size() > 3) set.remove(set.first());
//         }
        
//         return set.size() < 3 ? set.last() : set.first();
//     }
    
        // 三个max解法，非最优。原理就和小顶堆差不多，只不过简化了很多
//    public int thirdMax(int[] nums) {
//        Integer max1 = null;
//        Integer max2 = null;
//        Integer max3 = null;
        
//        for (int i=0; i<nums.length; i++) {
//            Integer n = nums[i];
            
//            if (n.equals(max1) || n.equals(max2) || n.equals(max3)){
//                continue;
//            }
            
//            if (max1 == null || n > max1) {
//                max3 = max2;
//                max2 = max1;
//                max1 = n;
//            } else if (max2 == null || n > max2) {
//                max3 = max2;
//                max2 = n;
//            } else if (max3 == null || n > max3) {
//                max3 = n;
//            }
//        }
        
//        return max3 == null ? max1 : max3;
//    }
    
        // 最优解
    public int thirdMax(int[] nums) {
        int maxFirst = Integer.MIN_VALUE;
        int maxSecond = Integer.MIN_VALUE;
        int maxThird = Integer.MIN_VALUE;
        
        boolean isSetMaxFirst = false;
        boolean isSetMaxSecond = false;
        boolean isSetMaxThird = false;
        
        for (int num : nums) {
            if ((isSetMaxFirst && num == maxFirst) || (isSetMaxSecond && num == maxSecond)){
                continue;
            }
            
            if (num >= maxFirst) {
                if (isSetMaxFirst) {
                    if (isSetMaxSecond) {
                        maxThird = maxSecond;
                        isSetMaxThird = true;
                    }
                    maxSecond = maxFirst;
                    isSetMaxSecond = true;
                }
                maxFirst = num;
                isSetMaxFirst = true;
            } else if (num >= maxSecond) {
                if (isSetMaxSecond) {
                    maxThird = maxSecond;
                    isSetMaxThird = true;
                }
                maxSecond = num;
                isSetMaxSecond = true;
            } else if (num >= maxThird) {
                maxThird = num;
                isSetMaxThird = true;
            }
        }
        
        return isSetMaxThird ? maxThird : maxFirst;
    }
}
